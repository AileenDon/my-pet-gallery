{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport petsData from \"../data/pets.json\"; // Import mock data from a local JSON file\n\n// Define the structure of a Pet object using a TypeScript interface\n\n// Custom hook to fetch and manage pet data\nconst usePets = () => {\n  _s();\n  // State to store the list of pets\n  const [pets, setPets] = useState([]);\n  // State to track the loading status\n  const [loading, setLoading] = useState(true);\n  // State to handle any errors that occur during fetching\n  const [error, setError] = useState(null);\n\n  // useEffect to load pets data when the component mounts\n  useEffect(() => {\n    const fetchPets = async () => {\n      try {\n        // Set pets data from the local JSON file\n        setPets(petsData);\n      } catch (error) {\n        // Set error message if fetching fails\n        setError(\"Failed to fetch pets\");\n      } finally {\n        // Set loading to false after data is loaded or on error\n        setLoading(false);\n      }\n    };\n    fetchPets(); // Call the fetch function\n  }, []);\n  return {\n    pets,\n    loading,\n    error\n  };\n};\n_s(usePets, \"et0d+fdihiF+yiwiUYREZ+W74aw=\");\nexport default usePets;","map":{"version":3,"names":["useState","useEffect","petsData","usePets","_s","pets","setPets","loading","setLoading","error","setError","fetchPets"],"sources":["/Users/yuanyuandong/Documents/VSC/my-pet-gallery/src/pages/Home.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport petsData from \"../data/pets.json\"; // Import mock data from a local JSON file\n\n// Define the structure of a Pet object using a TypeScript interface\ninterface Pet {\n  id: string;\n  imageUrl: string;\n  title: string;\n  description: string;\n  createdAt: string;\n}\n\n// Custom hook to fetch and manage pet data\nconst usePets = () => {\n  // State to store the list of pets\n  const [pets, setPets] = useState<Pet[]>([]);\n  // State to track the loading status\n  const [loading, setLoading] = useState<boolean>(true);\n  // State to handle any errors that occur during fetching\n  const [error, setError] = useState<string | null>(null);\n\n  // useEffect to load pets data when the component mounts\n  useEffect(() => {\n    const fetchPets = async () => {\n      try {\n        // Set pets data from the local JSON file\n        setPets(petsData);\n      } catch (error) {\n        // Set error message if fetching fails\n        setError(\"Failed to fetch pets\");\n      } finally {\n        // Set loading to false after data is loaded or on error\n        setLoading(false);\n      }\n    };\n\n    fetchPets(); // Call the fetch function\n  }, []);\n\n  return { pets, loading, error };\n};\n\nexport default usePets;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,mBAAmB,CAAC,CAAC;;AAE1C;;AASA;AACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAQ,EAAE,CAAC;EAC3C;EACA,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAU,IAAI,CAAC;EACrD;EACA,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACAL,OAAO,CAACJ,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACd;QACAC,QAAQ,CAAC,sBAAsB,CAAC;MAClC,CAAC,SAAS;QACR;QACAF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CA3BID,OAAO;AA6Bb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}